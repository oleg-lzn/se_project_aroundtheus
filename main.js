!function(){"use strict";var e={d:function(t,r){for(var s in r)e.o(r,s)&&!e.o(t,s)&&Object.defineProperty(t,s,{enumerable:!0,get:r[s]})},o:function(e,t){return Object.prototype.hasOwnProperty.call(e,t)}};e.d({},{A:function(){return C}});var t=class{constructor(e,t,r,s,i){let{name:n,link:o,_id:a,isLiked:l}=e;this._name=n,this._link=o,this._isLiked=l,this._id=a,this._cardSelector=t,this._handleImageClick=r,this._handleLikeToggle=s,this._handleCardDelete=i}_getCardTemplate(){return document.querySelector(this._cardSelector).content.firstElementChild.cloneNode(!0)}_setEventListeners(){this._likeButton.addEventListener("click",(()=>{this._handleLikeToggle(this._isLiked)})),this._trashButton.addEventListener("click",(()=>{C.open(),C._handleFormSubmit=()=>{this._handleCardDelete(this._id)}})),this._cardImage.addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}updateLikeStatus(e){this._isLiked=e,e?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}_renderCard(){this._cardElement=this._getCardTemplate(),this._likeButton=this._cardElement.querySelector(".card__like-button"),this._cardImage=this._cardElement.querySelector(".card__image"),this._trashButton=this._cardElement.querySelector(".card__delete-button"),this._cardTitle=this._cardElement.querySelector(".card__title"),this._cardTitle.textContent=this._name,this._cardImage.src=this._link,this._cardImage.alt=this._name,this._setEventListeners()}removeCard(){this._cardElement.remove()}open(){this.open()}getView(){return this._renderCard(),this._cardElement}},r=class{constructor(e,t){this._form=t,this._formSelector=e.formSelector,this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}_setEventListeners(){this._inputList=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputList.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this._toggleButtonState()}))}))}_showInputError(e,t){const r=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),r.classList.add(this._errorClass),r.textContent=t}_hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_hasInvalidInput(){return this._inputList.some((e=>!e.validity.valid))}_toggleButtonState(){this._hasInvalidInput()?this.disableButton():this._enableButton()}resetValidation(){this._inputList.forEach((e=>{this._hideInputError(e),e.value=""})),this.disableButton()}};class s{constructor(e,t){let{items:r,renderer:s}=e;this._items=r,this._container=document.querySelector(t),this._renderer=s}clear(){this._container.innerHTML=""}renderItems(){this.clear(),this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const i={formSelector:".popup__form",inputSelector:".popup__input",popupImageSelector:".popup__image",submitButtonSelector:".popup__button",inactiveButtonClass:"popup__button_disabled",inputErrorClass:"popup__input_type_error",errorClass:"popup__error_visible",closeButtonSelector:".popup__close",popup:".popup",cardsListSelector:".cards__list",cardSelector:".card"},n=(document.querySelector("#card-template").content.firstElementChild,document.querySelector(".profile")),o=(n.querySelector(".profile__title"),n.querySelector(".profile__subtitle"),document.querySelector(".popup")),a=(o.querySelector("[name=name]"),o.querySelector("[name=description]"),document.querySelector(".cards__list"),document.querySelector(".profile__avatar_container")),l=document.getElementById("addElement"),c=(l.querySelector("[name=title]"),l.querySelector("[name=url]"),document.getElementById("imageOpen")),h=(c.querySelector(".popup__image"),c.querySelector(".popup__title-small"),n.querySelector(".profile__edit-button")),u=n.querySelector(".profile__add-button");document.forms["new-card-form"],document.forms["profile-form"],document.querySelector(".spinner");var p=class{constructor(e){this.popupSelector=e,this.popupElement=document.querySelector(this.popupSelector),this._handleEscClose=this._handleEscClose.bind(this),this.setEventListeners()}open(){this.popupElement.classList.add("popup_open"),document.addEventListener("keydown",this._handleEscClose)}close(){this.popupElement.classList.remove("popup_open"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}setEventListeners(){this.popupElement.addEventListener("mousedown",(e=>{(e.target.classList.contains("popup")||e.target.classList.contains("popup__close"))&&this.close()}))}},d=class extends p{constructor(e){let{popupSelector:t,handleFormSubmit:r}=e;super(t),this._popupForm=this.popupElement.querySelector(".popup__form"),this._submitButton=this._popupForm.querySelector(".popup__button"),this._defaultButtonText=this._submitButton.textContent,this._handleFormSubmit=r,this._inputList=Array.from(this._popupForm.querySelectorAll(".popup__input")),this._setEventListeners()}_getInputValues(){return this._inputList.reduce(((e,t)=>{const{name:r,value:s}=t;return e[r]=s,e}),{})}renderLoading(e){this._submitButton.textContent=e?"Saving...":this._defaultButtonText}setInputValues(e){this._inputList.forEach((t=>{e[t.name]=t.value}))}_setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t),this._popupForm.reset(),this.close()})),super.setEventListeners()}close(){super.close()}};const _=new class{constructor(e){let{baseUrl:t,headers:r}=e;this._baseURL=t,this._headers=r}_checkTheApiResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserData(){return fetch(`${this._baseURL}/users/me`,{headers:this._headers}).then((e=>this._checkTheApiResponse(e))).catch((e=>console.error(e)))}editProfileData(e){return fetch(`${this._baseURL}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.name,about:e.description})}).then((e=>this._checkTheApiResponse(e))).catch((e=>console.error(e)))}getInitialCards(){return fetch(`${this._baseURL}/cards`,{headers:this._headers}).then((e=>this._checkTheApiResponse(e))).catch((e=>console.error(e)))}addNewCard(e){return fetch(`${this._baseURL}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e.title,link:e.url,isLiked:e.isLiked,_id:e._id})}).then((e=>this._checkTheApiResponse(e))).catch((e=>console.error(e)))}deleteCard(e){return fetch(`${this._baseURL}/cards/${e}`,{method:"DELETE",headers:this._headers}).then((e=>this._checkTheApiResponse(e))).catch((e=>console.error(e)))}likeCard(e){return fetch(`${this._baseURL}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then((e=>this._checkTheApiResponse(e))).catch((e=>console.error(e)))}dislikeCard(e){return fetch(`${this._baseURL}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then((e=>this._checkTheApiResponse(e))).catch((e=>console.error(e)))}avatarUpdate(e){return fetch(`${this._baseURL}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e.url})}).then((e=>this._checkTheApiResponse(e))).catch((e=>console.error(e)))}loadPageContent(){const e=[this.getInitialCards(),this.getUserData()];return Promise.all(e)}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"fbd43f39-bc6f-4ff1-b85c-3a8e63a0b02d","Content-Type":"application/json"}});let m;function S(e){const r=new t(e,"#card-template",(()=>E.open(e)),(t=>{t?_.dislikeCard(e._id).then((e=>{r.updateLikeStatus(e.isLiked)})):_.likeCard(e._id).then((e=>{r.updateLikeStatus(e.isLiked)}))}),(e=>{_.deleteCard(e).then((()=>{r.removeCard()})).catch((e=>console.error("Error deleting the card",e)))}));return r.getView()}_.loadPageContent().then((e=>{let[t,r]=e;b.setUserInfo({name:r.name,description:r.about,avatar:r.avatar}),m=new s({items:t,renderer:e=>{const t=S(e);m.addItem(t)}},i.cardsListSelector),m.renderItems()})).catch((e=>console.error(e)));const E=new class extends p{constructor(e){super(e),this.imageElement=this.popupElement.querySelector(".popup__image"),this.captionElement=this.popupElement.querySelector(".popup__title-small")}open(e){let{link:t,name:r}=e;this.imageElement.src=t,this.imageElement.alt=r,this.captionElement.textContent=r,super.open()}}("#imageOpen"),v=new class extends p{constructor(e){let{popupSelector:t,handleFormSubmit:r}=e;super(t),this._popupForm=this.popupElement.querySelector(".popup__form"),this._handleFormSubmit=r,this._setEventListeners()}_setEventListeners(){this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit&&"function"==typeof this._handleFormSubmit&&(this._handleFormSubmit(),this.close())})),super.setEventListeners()}open(){super.open()}}({popupSelector:"#cardDelete"}),f=new d({popupSelector:"#addElement",handleFormSubmit:e=>{f.renderLoading(!0),_.addNewCard(e).then((e=>{const t=S({name:e.name,link:e.link,_id:e._id,isLiked:e.isLiked});m.addItem(t),g["new-card-form"].disableButton()})).catch((e=>console.error(e))).finally((()=>f.renderLoading(!1)))}});u.addEventListener("click",(()=>{f.open()}));const L=new d({popupSelector:"#profileChange",handleFormSubmit:e=>{L.renderLoading(!0),_.editProfileData(e).then((e=>{b.setUserInfo({name:e.name,description:e.about})})).catch((e=>console.error(e))).finally((()=>L.renderLoading(!1)))}}),b=new class{constructor(e){let{nameSelector:t,descriptionSelector:r,avatarSelector:s}=e;this._nameElement=document.querySelector(t),this._descriptionElement=document.querySelector(r),this._avatarElement=document.querySelector(s)}getUserInfo(){return{name:this._nameElement.textContent,description:this._descriptionElement.textContent,avatar:this._avatarElement.src}}setUserInfo(e){let{name:t,description:r,avatar:s}=e;this._nameElement.textContent=t,this._descriptionElement.textContent=r,s&&(this._avatarElement.src=s)}setNewAvatar(e){this._avatarElement.src=e.avatar}}({nameSelector:".profile__title",descriptionSelector:".profile__subtitle",avatarSelector:".profile__avatar"}),y=new class extends p{constructor(e){let{popupSelector:t,avatarSelector:r,handleFormSubmit:s}=e;super(t),this._popupForm=this.popupElement.querySelector(".popup__form"),this._submitButton=this._popupForm.querySelector(".popup__button"),this._defaultButtonText=this._submitButton.textContent,this._avatarElement=document.querySelector(r),this._handleFormSubmit=s,this._inputList=Array.from(this._popupForm.querySelectorAll(".popup__input")),this._setEventListeners()}_getInputValues(){return this._inputList.reduce(((e,t)=>{const{name:r,value:s}=t;return e[r]=s,e}),{})}renderLoading(e){this._submitButton.textContent=e?"Saving...":this._defaultButtonText}_setEventListeners(){this._popupForm.addEventListener("submit",(e=>{if(e.preventDefault(),this._handleFormSubmit&&"function"==typeof this._handleFormSubmit){const e=this._getInputValues();this._handleFormSubmit(e),this._popupForm.reset(),this.close()}})),super.setEventListeners()}changeProfilePic(e){this._avatarElement.src=e.avatar}}({popupSelector:"#profilePicChange",avatarSelector:".profile__avatar",handleFormSubmit:e=>{y.renderLoading(!0),_.avatarUpdate(e).then((e=>{y.changeProfilePic(e),b.setNewAvatar(e)})).catch((e=>console.error(e))).finally((()=>y.renderLoading(!1)))}});a.addEventListener("click",(()=>{y.open()})),h.addEventListener("click",(()=>{g["profile-form"].resetValidation(),L.open(),_.getUserData().then((e=>{L.setInputValues(e)})).catch((e=>console.error(e)))}));const g={};(e=>{Array.from(document.querySelectorAll(e.formSelector)).forEach((t=>{const s=new r(e,t),i=t.getAttribute("id");g[i]=s,s.enableValidation()}))})(i);var C=v}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,